//! Exceptions that can be generated by the CPU

/// Possible exceptions that can be generated by an Intel CPU
#[derive(Debug, Copy, Clone)]
pub enum Exception {
    /// Caused by DIV and IDIV instructions
    DivideByZero,

    /// Caused by Instruction, data, I/O breakpoints, single step, and others
    Debug,

    /// Caused by Non maskable external interrupt
    NonMaskableInterrupt,

    /// Caused by INT3 instruction
    Breakpoint,

    /// Caused by INT0 instruction
    Overflow,

    /// Caused by BOUND instruction
    BoundRangeExceeded,

    /// Caused by UD instruction or reserved opcode
    InvalidOpcode,

    /// Caused by floating-point or WAIT/FWAIT instruction
    DeviceNotAvailable,

    /// Caused by any instruction that can generate an exception, an NMI, or an INTR
    DoubleFault,

    /// Caused by a task switch or TSS access
    InvalidTss,

    /// Caused by loading segment registers or accessing system segments
    SegmentNotPresent,

    /// Caused by stack operations and SS register loads
    StackSegment,

    /// Caused by a failed memory reference or other failed protection check
    GeneralProtection,

    /// Caused by a failed memory reference
    PageFault,

    /// Caused by x87 FPU floating-point or WAIT/FWAIT instruction
    FloatingPoint,

    /// Caused by misaligned data reference in memory
    AlignmentCheck,

    /// Caused by error codes (if any) and source are model dependent
    MachineCheck,

    /// Caused by SSE/SSE2/SSE3 floating-point instructions
    SimdFloatingPoint,

    /// Caused by EPT violations
    Virtualization,

    /// Caused by RET, IRET, RSTORSSP, and SETSSBSY instructions. When CET indirect
    /// branch tracking is enabled, this exception can be generated due to a missing
    /// ENDBRANCH instruction at target of an indirect call or jump
    ControlProtection,

    /// Any other exception
    Unknown(u32),
}

impl From<u32> for Exception {
    fn from(val: u32) -> Exception {
        match val {
            0 => Exception::DivideByZero,
            1 => Exception::Debug,
            2 => Exception::NonMaskableInterrupt,
            3 => Exception::Breakpoint,
            4 => Exception::Overflow,
            5 => Exception::BoundRangeExceeded,
            6 => Exception::InvalidOpcode,
            7 => Exception::DeviceNotAvailable,
            8 => Exception::DoubleFault,
            10 => Exception::InvalidTss,
            11 => Exception::SegmentNotPresent,
            12 => Exception::StackSegment,
            13 => Exception::GeneralProtection,
            14 => Exception::PageFault,
            16 => Exception::FloatingPoint,
            17 => Exception::AlignmentCheck,
            18 => Exception::MachineCheck,
            19 => Exception::SimdFloatingPoint,
            20 => Exception::Virtualization,
            21 => Exception::ControlProtection,
            _ => Exception::Unknown(val),
        }
    }
}
