//! Fuzzer template

#![allow(clippy::missing_docs_in_private_items)]
#![allow(clippy::cast_possible_truncation)]
#![allow(clippy::cast_lossless)]

use anyhow::Result;

use snapchange::addrs::{Cr3, VirtAddr};
use snapchange::fuzzer::{Breakpoint, BreakpointLookup, BreakpointType, Fuzzer};
use snapchange::fuzzvm::FuzzVm;
use snapchange::Execution;

REPLACEMECOMMENTS

const CR3: Cr3 = Cr3(REPLACEMECR3);

#[derive(Default)]
pub struct Example02Fuzzer {
    // Fuzzer specific data could go in here
}

impl Fuzzer for Example02Fuzzer {
    type Input = Vec<u8>;
    const START_ADDRESS: u64 = REPLACEMERIP;
    const MAX_INPUT_LENGTH: usize = 0x10000;

    fn set_input(&mut self, input: &Self::Input, fuzzvm: &mut FuzzVm<Self>) -> Result<()> {
        panic!("Write the set_input function in src/fuzzer.rs");

        // Write the mutated input to the buffer address
        // fuzzvm.???

        // Write the current input size to the address of the size variable 
        // fuzzvm.write::<u32>(VirtAddr(???), CR3, ???)

        Ok(())
    }

    fn breakpoints(&self) -> Option<&[Breakpoint<Self>]> {
        Some(&[
            Breakpoint {
                lookup: BreakpointLookup::SymbolOffset("tiffinfo!_tiffReadProc", 0x0),
                bp_type: BreakpointType::Repeated,
                bp_hook: |fuzzvm: &mut FuzzVm<Self>, input, _fuzzer| {
                    fuzzvm.print_context()?;
                    panic!("Write the hook for tiffReadProc in src/fuzzer.rs");

                    // Parse the file descriptor, buffer, and size from the
                    // current guest context. Take a look at the function prologue
                    // for tiffReadProc
                    //
                    // File descriptor - rdi
                    // Buffer address - rsi
                    // Size - rdx
                    // let fd = fuzzvm.???
                    // let buf = fuzzvm.???
                    // let size = fuzzvm.???

                    // Write the input to the buffer addres
                    // fuzzvm.write_bytes_dirty(VirtAddr(buf), fuzzvm.cr3(), &input[..size]).unwrap();

                    // Set the return value (in rax) to the number of bytes written
                    // fuzzvm.???

                    // Fake return from the function
                    // fuzzvm.???

                    Ok(Execution::Continue)
                },
            },
            Breakpoint {
                lookup: BreakpointLookup::SymbolOffset("tiffinfo!TIFFErrorExt", 0x0),
                bp_type: BreakpointType::Repeated,
                bp_hook: |fuzzvm: &mut FuzzVm<Self>, input, _fuzzer| {
                    // Bonus Challenge: Looking at the function TIFFErrorExt, log
                    // each error message when this hook is called
                    fuzzvm.fake_immediate_return()?;
                    Ok(Execution::Continue)
                },
            },
            Breakpoint {
                lookup: BreakpointLookup::SymbolOffset("tiffinfo!TIFFWarningExt", 0x0),
                bp_type: BreakpointType::Repeated,
                bp_hook: |fuzzvm: &mut FuzzVm<Self>, input, _fuzzer| {
                    // Bonus Challenge: Looking at the function TIFFWarningExt, log
                    // each warning message when this hook is called
                    fuzzvm.fake_immediate_return()?;
                    Ok(Execution::Continue)
                },
            },
        ])
    }
}
